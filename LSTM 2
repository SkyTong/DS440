{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOBibv8NerCj0a9xjPp5aYJ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"P3C3sgGGhc7q","executionInfo":{"status":"ok","timestamp":1711319494756,"user_tz":240,"elapsed":5135,"user":{"displayName":"Aaryan Goel","userId":"01982285527708524487"}}},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","from sklearn.preprocessing import MinMaxScaler\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import LSTM, Dense"]},{"cell_type":"code","source":["merged_data = pd.read_csv('/content/processed_hourly_data.csv',index_col=0)\n","merged_data"],"metadata":{"id":"96DaEWTIhejm","colab":{"base_uri":"https://localhost:8080/","height":964},"executionInfo":{"status":"ok","timestamp":1711319500378,"user_tz":240,"elapsed":542,"user":{"displayName":"Aaryan Goel","userId":"01982285527708524487"}},"outputId":"29d3cc89-e354-49fe-e990-53a37655cf53"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                        Datetime        SP500         DOW30  EuroStoxx50  \\\n","667    2022-02-28 10:00:00-05:00  4360.924805  33767.826172  3915.540039   \n","668    2022-02-28 11:00:00-05:00  4369.179932  33849.894531  3933.479980   \n","669    2022-02-28 12:00:00-05:00  4349.699951  33720.744141  3933.479980   \n","670    2022-02-28 13:00:00-05:00  4332.359863  33589.654297  3933.479980   \n","671    2022-02-28 14:00:00-05:00  4331.229980  33588.664062  3933.479980   \n","...                          ...          ...           ...          ...   \n","18064  2024-02-20 11:00:00-05:00  4969.645020  38550.503906  4763.259766   \n","18065  2024-02-20 12:00:00-05:00  4961.074951  38504.060547  4763.259766   \n","18066  2024-02-20 13:00:00-05:00  4965.669922  38540.031250  4763.259766   \n","18067  2024-02-20 14:00:00-05:00  4973.215088  38575.441406  4763.259766   \n","18068  2024-02-20 15:00:00-05:00  4976.480225  38583.605469  4763.259766   \n","\n","             NASDAQ   CrudeOil          SSE         Gold        VIX  \\\n","667    13709.718262  95.510002  3457.902100  1910.400024  30.559999   \n","668    13734.242676  95.440002  3457.902100  1894.500000  28.690001   \n","669    13666.251465  96.209999  3457.902100  1900.900024  30.639999   \n","670    13607.824707  96.459999  3457.902100  1900.699951  30.820000   \n","671    13605.203125  95.680000  3457.902100  1908.300049  31.920000   \n","...             ...        ...          ...          ...        ...   \n","18064  15567.405273  78.860001  2920.561279  2038.500000  15.580000   \n","18065  15532.355957  79.169998  2920.561279  2040.000000  15.640000   \n","18066  15555.064941  79.230003  2920.561279  2038.599976  15.500000   \n","18067  15592.756348  78.269997  2920.561279  2036.500000  15.330000   \n","18068  15624.660156  78.269997  2920.561279  2035.800049  15.310000   \n","\n","          Nikkei225  ...  total_volume_quote  total_volume_base  \\\n","667    26522.330078  ...        4.074564e+08       8.501518e+09   \n","668    26522.330078  ...        2.951618e+08       7.640820e+09   \n","669    26522.330078  ...        2.022620e+08       6.928419e+09   \n","670    26522.330078  ...        1.731512e+08       6.676633e+09   \n","671    26522.330078  ...        1.655895e+08       5.810772e+09   \n","...             ...  ...                 ...                ...   \n","18064  38409.390625  ...        1.727552e+09       1.730651e+09   \n","18065  38409.390625  ...        3.983693e+08       3.721585e+09   \n","18066  38409.390625  ...        1.272772e+08       1.996156e+09   \n","18067  38409.390625  ...        2.904525e+08       2.182250e+09   \n","18068  38409.390625  ...        5.113036e+07       4.407568e+08   \n","\n","       total_volume_total     volume      high       low      open     close  \\\n","667          8.908974e+09  100298.59  40917.71  39652.14  39849.29  40845.79   \n","668          7.935982e+09   71235.25  41338.07  40736.36  40845.79  41021.81   \n","669          7.130681e+09   40264.68  41320.14  40768.17  41021.81  41319.61   \n","670          6.849784e+09   34319.26  41427.99  41082.37  41319.61  41217.44   \n","671          5.976362e+09   28324.04  41377.67  41057.84  41217.44  41357.77   \n","...                   ...        ...       ...       ...       ...       ...   \n","18064        3.458204e+09   33578.32  51795.47  51369.97  51693.91  51396.39   \n","18065        4.119954e+09   44409.48  51397.71  50766.77  51396.39  51321.90   \n","18066        2.123433e+09   22321.76  51536.57  51236.14  51321.90  51504.22   \n","18067        2.472703e+09   28053.63  52111.16  51439.74  51504.22  52095.65   \n","18068        4.918871e+08   13645.87  52222.07  51950.84  52095.65  52167.67   \n","\n","       volumefrom      volumeto  \n","667       7495.87  3.026021e+08  \n","668       5232.77  2.148198e+08  \n","669       2842.60  1.165622e+08  \n","670       2455.10  1.013162e+08  \n","671       2007.00  8.271987e+07  \n","...           ...           ...  \n","18064     1748.02  9.020375e+07  \n","18065     3702.71  1.892794e+08  \n","18066     1518.03  7.796947e+07  \n","18067     1791.37  9.274488e+07  \n","18068     2529.55  1.317853e+08  \n","\n","[12447 rows x 32 columns]"],"text/html":["\n","  <div id=\"df-288e0a16-1b0e-4ef3-8abe-323032d1ecca\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Datetime</th>\n","      <th>SP500</th>\n","      <th>DOW30</th>\n","      <th>EuroStoxx50</th>\n","      <th>NASDAQ</th>\n","      <th>CrudeOil</th>\n","      <th>SSE</th>\n","      <th>Gold</th>\n","      <th>VIX</th>\n","      <th>Nikkei225</th>\n","      <th>...</th>\n","      <th>total_volume_quote</th>\n","      <th>total_volume_base</th>\n","      <th>total_volume_total</th>\n","      <th>volume</th>\n","      <th>high</th>\n","      <th>low</th>\n","      <th>open</th>\n","      <th>close</th>\n","      <th>volumefrom</th>\n","      <th>volumeto</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>667</th>\n","      <td>2022-02-28 10:00:00-05:00</td>\n","      <td>4360.924805</td>\n","      <td>33767.826172</td>\n","      <td>3915.540039</td>\n","      <td>13709.718262</td>\n","      <td>95.510002</td>\n","      <td>3457.902100</td>\n","      <td>1910.400024</td>\n","      <td>30.559999</td>\n","      <td>26522.330078</td>\n","      <td>...</td>\n","      <td>4.074564e+08</td>\n","      <td>8.501518e+09</td>\n","      <td>8.908974e+09</td>\n","      <td>100298.59</td>\n","      <td>40917.71</td>\n","      <td>39652.14</td>\n","      <td>39849.29</td>\n","      <td>40845.79</td>\n","      <td>7495.87</td>\n","      <td>3.026021e+08</td>\n","    </tr>\n","    <tr>\n","      <th>668</th>\n","      <td>2022-02-28 11:00:00-05:00</td>\n","      <td>4369.179932</td>\n","      <td>33849.894531</td>\n","      <td>3933.479980</td>\n","      <td>13734.242676</td>\n","      <td>95.440002</td>\n","      <td>3457.902100</td>\n","      <td>1894.500000</td>\n","      <td>28.690001</td>\n","      <td>26522.330078</td>\n","      <td>...</td>\n","      <td>2.951618e+08</td>\n","      <td>7.640820e+09</td>\n","      <td>7.935982e+09</td>\n","      <td>71235.25</td>\n","      <td>41338.07</td>\n","      <td>40736.36</td>\n","      <td>40845.79</td>\n","      <td>41021.81</td>\n","      <td>5232.77</td>\n","      <td>2.148198e+08</td>\n","    </tr>\n","    <tr>\n","      <th>669</th>\n","      <td>2022-02-28 12:00:00-05:00</td>\n","      <td>4349.699951</td>\n","      <td>33720.744141</td>\n","      <td>3933.479980</td>\n","      <td>13666.251465</td>\n","      <td>96.209999</td>\n","      <td>3457.902100</td>\n","      <td>1900.900024</td>\n","      <td>30.639999</td>\n","      <td>26522.330078</td>\n","      <td>...</td>\n","      <td>2.022620e+08</td>\n","      <td>6.928419e+09</td>\n","      <td>7.130681e+09</td>\n","      <td>40264.68</td>\n","      <td>41320.14</td>\n","      <td>40768.17</td>\n","      <td>41021.81</td>\n","      <td>41319.61</td>\n","      <td>2842.60</td>\n","      <td>1.165622e+08</td>\n","    </tr>\n","    <tr>\n","      <th>670</th>\n","      <td>2022-02-28 13:00:00-05:00</td>\n","      <td>4332.359863</td>\n","      <td>33589.654297</td>\n","      <td>3933.479980</td>\n","      <td>13607.824707</td>\n","      <td>96.459999</td>\n","      <td>3457.902100</td>\n","      <td>1900.699951</td>\n","      <td>30.820000</td>\n","      <td>26522.330078</td>\n","      <td>...</td>\n","      <td>1.731512e+08</td>\n","      <td>6.676633e+09</td>\n","      <td>6.849784e+09</td>\n","      <td>34319.26</td>\n","      <td>41427.99</td>\n","      <td>41082.37</td>\n","      <td>41319.61</td>\n","      <td>41217.44</td>\n","      <td>2455.10</td>\n","      <td>1.013162e+08</td>\n","    </tr>\n","    <tr>\n","      <th>671</th>\n","      <td>2022-02-28 14:00:00-05:00</td>\n","      <td>4331.229980</td>\n","      <td>33588.664062</td>\n","      <td>3933.479980</td>\n","      <td>13605.203125</td>\n","      <td>95.680000</td>\n","      <td>3457.902100</td>\n","      <td>1908.300049</td>\n","      <td>31.920000</td>\n","      <td>26522.330078</td>\n","      <td>...</td>\n","      <td>1.655895e+08</td>\n","      <td>5.810772e+09</td>\n","      <td>5.976362e+09</td>\n","      <td>28324.04</td>\n","      <td>41377.67</td>\n","      <td>41057.84</td>\n","      <td>41217.44</td>\n","      <td>41357.77</td>\n","      <td>2007.00</td>\n","      <td>8.271987e+07</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>18064</th>\n","      <td>2024-02-20 11:00:00-05:00</td>\n","      <td>4969.645020</td>\n","      <td>38550.503906</td>\n","      <td>4763.259766</td>\n","      <td>15567.405273</td>\n","      <td>78.860001</td>\n","      <td>2920.561279</td>\n","      <td>2038.500000</td>\n","      <td>15.580000</td>\n","      <td>38409.390625</td>\n","      <td>...</td>\n","      <td>1.727552e+09</td>\n","      <td>1.730651e+09</td>\n","      <td>3.458204e+09</td>\n","      <td>33578.32</td>\n","      <td>51795.47</td>\n","      <td>51369.97</td>\n","      <td>51693.91</td>\n","      <td>51396.39</td>\n","      <td>1748.02</td>\n","      <td>9.020375e+07</td>\n","    </tr>\n","    <tr>\n","      <th>18065</th>\n","      <td>2024-02-20 12:00:00-05:00</td>\n","      <td>4961.074951</td>\n","      <td>38504.060547</td>\n","      <td>4763.259766</td>\n","      <td>15532.355957</td>\n","      <td>79.169998</td>\n","      <td>2920.561279</td>\n","      <td>2040.000000</td>\n","      <td>15.640000</td>\n","      <td>38409.390625</td>\n","      <td>...</td>\n","      <td>3.983693e+08</td>\n","      <td>3.721585e+09</td>\n","      <td>4.119954e+09</td>\n","      <td>44409.48</td>\n","      <td>51397.71</td>\n","      <td>50766.77</td>\n","      <td>51396.39</td>\n","      <td>51321.90</td>\n","      <td>3702.71</td>\n","      <td>1.892794e+08</td>\n","    </tr>\n","    <tr>\n","      <th>18066</th>\n","      <td>2024-02-20 13:00:00-05:00</td>\n","      <td>4965.669922</td>\n","      <td>38540.031250</td>\n","      <td>4763.259766</td>\n","      <td>15555.064941</td>\n","      <td>79.230003</td>\n","      <td>2920.561279</td>\n","      <td>2038.599976</td>\n","      <td>15.500000</td>\n","      <td>38409.390625</td>\n","      <td>...</td>\n","      <td>1.272772e+08</td>\n","      <td>1.996156e+09</td>\n","      <td>2.123433e+09</td>\n","      <td>22321.76</td>\n","      <td>51536.57</td>\n","      <td>51236.14</td>\n","      <td>51321.90</td>\n","      <td>51504.22</td>\n","      <td>1518.03</td>\n","      <td>7.796947e+07</td>\n","    </tr>\n","    <tr>\n","      <th>18067</th>\n","      <td>2024-02-20 14:00:00-05:00</td>\n","      <td>4973.215088</td>\n","      <td>38575.441406</td>\n","      <td>4763.259766</td>\n","      <td>15592.756348</td>\n","      <td>78.269997</td>\n","      <td>2920.561279</td>\n","      <td>2036.500000</td>\n","      <td>15.330000</td>\n","      <td>38409.390625</td>\n","      <td>...</td>\n","      <td>2.904525e+08</td>\n","      <td>2.182250e+09</td>\n","      <td>2.472703e+09</td>\n","      <td>28053.63</td>\n","      <td>52111.16</td>\n","      <td>51439.74</td>\n","      <td>51504.22</td>\n","      <td>52095.65</td>\n","      <td>1791.37</td>\n","      <td>9.274488e+07</td>\n","    </tr>\n","    <tr>\n","      <th>18068</th>\n","      <td>2024-02-20 15:00:00-05:00</td>\n","      <td>4976.480225</td>\n","      <td>38583.605469</td>\n","      <td>4763.259766</td>\n","      <td>15624.660156</td>\n","      <td>78.269997</td>\n","      <td>2920.561279</td>\n","      <td>2035.800049</td>\n","      <td>15.310000</td>\n","      <td>38409.390625</td>\n","      <td>...</td>\n","      <td>5.113036e+07</td>\n","      <td>4.407568e+08</td>\n","      <td>4.918871e+08</td>\n","      <td>13645.87</td>\n","      <td>52222.07</td>\n","      <td>51950.84</td>\n","      <td>52095.65</td>\n","      <td>52167.67</td>\n","      <td>2529.55</td>\n","      <td>1.317853e+08</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>12447 rows × 32 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-288e0a16-1b0e-4ef3-8abe-323032d1ecca')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-288e0a16-1b0e-4ef3-8abe-323032d1ecca button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-288e0a16-1b0e-4ef3-8abe-323032d1ecca');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-63866824-c87e-4d36-9430-84ff547ea776\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-63866824-c87e-4d36-9430-84ff547ea776')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-63866824-c87e-4d36-9430-84ff547ea776 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_9f6e7df8-b9e1-4505-920f-61b985693c08\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('merged_data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_9f6e7df8-b9e1-4505-920f-61b985693c08 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('merged_data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"merged_data"}},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["df = pd.DataFrame(merged_data)\n","df['Datetime'] = pd.to_datetime(df['Datetime'])\n","df.set_index('Datetime', inplace=True)\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":547},"id":"2EBlV6bDhvTj","executionInfo":{"status":"ok","timestamp":1711319500642,"user_tz":240,"elapsed":274,"user":{"displayName":"Aaryan Goel","userId":"01982285527708524487"}},"outputId":"deb142e0-6bb5-48da-e7a1-5c2bc4605f68"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                 SP500         DOW30  EuroStoxx50  \\\n","Datetime                                                            \n","2022-02-28 10:00:00-05:00  4360.924805  33767.826172  3915.540039   \n","2022-02-28 11:00:00-05:00  4369.179932  33849.894531  3933.479980   \n","2022-02-28 12:00:00-05:00  4349.699951  33720.744141  3933.479980   \n","2022-02-28 13:00:00-05:00  4332.359863  33589.654297  3933.479980   \n","2022-02-28 14:00:00-05:00  4331.229980  33588.664062  3933.479980   \n","\n","                                 NASDAQ   CrudeOil        SSE         Gold  \\\n","Datetime                                                                     \n","2022-02-28 10:00:00-05:00  13709.718262  95.510002  3457.9021  1910.400024   \n","2022-02-28 11:00:00-05:00  13734.242676  95.440002  3457.9021  1894.500000   \n","2022-02-28 12:00:00-05:00  13666.251465  96.209999  3457.9021  1900.900024   \n","2022-02-28 13:00:00-05:00  13607.824707  96.459999  3457.9021  1900.699951   \n","2022-02-28 14:00:00-05:00  13605.203125  95.680000  3457.9021  1908.300049   \n","\n","                                 VIX     Nikkei225      FTSE100  ...  \\\n","Datetime                                                         ...   \n","2022-02-28 10:00:00-05:00  30.559999  26522.330078  7435.509766  ...   \n","2022-02-28 11:00:00-05:00  28.690001  26522.330078  7465.209961  ...   \n","2022-02-28 12:00:00-05:00  30.639999  26522.330078  7465.209961  ...   \n","2022-02-28 13:00:00-05:00  30.820000  26522.330078  7465.209961  ...   \n","2022-02-28 14:00:00-05:00  31.920000  26522.330078  7465.209961  ...   \n","\n","                           total_volume_quote  total_volume_base  \\\n","Datetime                                                           \n","2022-02-28 10:00:00-05:00        4.074564e+08       8.501518e+09   \n","2022-02-28 11:00:00-05:00        2.951618e+08       7.640820e+09   \n","2022-02-28 12:00:00-05:00        2.022620e+08       6.928419e+09   \n","2022-02-28 13:00:00-05:00        1.731512e+08       6.676633e+09   \n","2022-02-28 14:00:00-05:00        1.655895e+08       5.810772e+09   \n","\n","                           total_volume_total     volume      high       low  \\\n","Datetime                                                                       \n","2022-02-28 10:00:00-05:00        8.908974e+09  100298.59  40917.71  39652.14   \n","2022-02-28 11:00:00-05:00        7.935982e+09   71235.25  41338.07  40736.36   \n","2022-02-28 12:00:00-05:00        7.130681e+09   40264.68  41320.14  40768.17   \n","2022-02-28 13:00:00-05:00        6.849784e+09   34319.26  41427.99  41082.37   \n","2022-02-28 14:00:00-05:00        5.976362e+09   28324.04  41377.67  41057.84   \n","\n","                               open     close  volumefrom      volumeto  \n","Datetime                                                                 \n","2022-02-28 10:00:00-05:00  39849.29  40845.79     7495.87  3.026021e+08  \n","2022-02-28 11:00:00-05:00  40845.79  41021.81     5232.77  2.148198e+08  \n","2022-02-28 12:00:00-05:00  41021.81  41319.61     2842.60  1.165622e+08  \n","2022-02-28 13:00:00-05:00  41319.61  41217.44     2455.10  1.013162e+08  \n","2022-02-28 14:00:00-05:00  41217.44  41357.77     2007.00  8.271987e+07  \n","\n","[5 rows x 31 columns]"],"text/html":["\n","  <div id=\"df-85d466d6-38f5-4537-aa04-f32878ea5eca\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>SP500</th>\n","      <th>DOW30</th>\n","      <th>EuroStoxx50</th>\n","      <th>NASDAQ</th>\n","      <th>CrudeOil</th>\n","      <th>SSE</th>\n","      <th>Gold</th>\n","      <th>VIX</th>\n","      <th>Nikkei225</th>\n","      <th>FTSE100</th>\n","      <th>...</th>\n","      <th>total_volume_quote</th>\n","      <th>total_volume_base</th>\n","      <th>total_volume_total</th>\n","      <th>volume</th>\n","      <th>high</th>\n","      <th>low</th>\n","      <th>open</th>\n","      <th>close</th>\n","      <th>volumefrom</th>\n","      <th>volumeto</th>\n","    </tr>\n","    <tr>\n","      <th>Datetime</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2022-02-28 10:00:00-05:00</th>\n","      <td>4360.924805</td>\n","      <td>33767.826172</td>\n","      <td>3915.540039</td>\n","      <td>13709.718262</td>\n","      <td>95.510002</td>\n","      <td>3457.9021</td>\n","      <td>1910.400024</td>\n","      <td>30.559999</td>\n","      <td>26522.330078</td>\n","      <td>7435.509766</td>\n","      <td>...</td>\n","      <td>4.074564e+08</td>\n","      <td>8.501518e+09</td>\n","      <td>8.908974e+09</td>\n","      <td>100298.59</td>\n","      <td>40917.71</td>\n","      <td>39652.14</td>\n","      <td>39849.29</td>\n","      <td>40845.79</td>\n","      <td>7495.87</td>\n","      <td>3.026021e+08</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-28 11:00:00-05:00</th>\n","      <td>4369.179932</td>\n","      <td>33849.894531</td>\n","      <td>3933.479980</td>\n","      <td>13734.242676</td>\n","      <td>95.440002</td>\n","      <td>3457.9021</td>\n","      <td>1894.500000</td>\n","      <td>28.690001</td>\n","      <td>26522.330078</td>\n","      <td>7465.209961</td>\n","      <td>...</td>\n","      <td>2.951618e+08</td>\n","      <td>7.640820e+09</td>\n","      <td>7.935982e+09</td>\n","      <td>71235.25</td>\n","      <td>41338.07</td>\n","      <td>40736.36</td>\n","      <td>40845.79</td>\n","      <td>41021.81</td>\n","      <td>5232.77</td>\n","      <td>2.148198e+08</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-28 12:00:00-05:00</th>\n","      <td>4349.699951</td>\n","      <td>33720.744141</td>\n","      <td>3933.479980</td>\n","      <td>13666.251465</td>\n","      <td>96.209999</td>\n","      <td>3457.9021</td>\n","      <td>1900.900024</td>\n","      <td>30.639999</td>\n","      <td>26522.330078</td>\n","      <td>7465.209961</td>\n","      <td>...</td>\n","      <td>2.022620e+08</td>\n","      <td>6.928419e+09</td>\n","      <td>7.130681e+09</td>\n","      <td>40264.68</td>\n","      <td>41320.14</td>\n","      <td>40768.17</td>\n","      <td>41021.81</td>\n","      <td>41319.61</td>\n","      <td>2842.60</td>\n","      <td>1.165622e+08</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-28 13:00:00-05:00</th>\n","      <td>4332.359863</td>\n","      <td>33589.654297</td>\n","      <td>3933.479980</td>\n","      <td>13607.824707</td>\n","      <td>96.459999</td>\n","      <td>3457.9021</td>\n","      <td>1900.699951</td>\n","      <td>30.820000</td>\n","      <td>26522.330078</td>\n","      <td>7465.209961</td>\n","      <td>...</td>\n","      <td>1.731512e+08</td>\n","      <td>6.676633e+09</td>\n","      <td>6.849784e+09</td>\n","      <td>34319.26</td>\n","      <td>41427.99</td>\n","      <td>41082.37</td>\n","      <td>41319.61</td>\n","      <td>41217.44</td>\n","      <td>2455.10</td>\n","      <td>1.013162e+08</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-28 14:00:00-05:00</th>\n","      <td>4331.229980</td>\n","      <td>33588.664062</td>\n","      <td>3933.479980</td>\n","      <td>13605.203125</td>\n","      <td>95.680000</td>\n","      <td>3457.9021</td>\n","      <td>1908.300049</td>\n","      <td>31.920000</td>\n","      <td>26522.330078</td>\n","      <td>7465.209961</td>\n","      <td>...</td>\n","      <td>1.655895e+08</td>\n","      <td>5.810772e+09</td>\n","      <td>5.976362e+09</td>\n","      <td>28324.04</td>\n","      <td>41377.67</td>\n","      <td>41057.84</td>\n","      <td>41217.44</td>\n","      <td>41357.77</td>\n","      <td>2007.00</td>\n","      <td>8.271987e+07</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 31 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-85d466d6-38f5-4537-aa04-f32878ea5eca')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-85d466d6-38f5-4537-aa04-f32878ea5eca button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-85d466d6-38f5-4537-aa04-f32878ea5eca');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8fafdd65-5fbf-4355-b8f3-0ce6b564efe4\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8fafdd65-5fbf-4355-b8f3-0ce6b564efe4')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8fafdd65-5fbf-4355-b8f3-0ce6b564efe4 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","source":["#configuration"],"metadata":{"id":"JYmp9gs9j2JY"}},{"cell_type":"code","source":["expr_name = 'expr_1'\n","look_back = 24*60 # 60 days, as each entry is for 1 hour\n","lstm_layers = 32\n","epochs=5\n","batch_size=128"],"metadata":{"id":"Xzje6AN8j1ne","executionInfo":{"status":"ok","timestamp":1711319500642,"user_tz":240,"elapsed":10,"user":{"displayName":"Aaryan Goel","userId":"01982285527708524487"}}},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":["#Dataset scalling"],"metadata":{"id":"p5RVxCLUkJtx"}},{"cell_type":"code","source":["\"\"\"\n","dataset = merged_data.values\n","target_variable = 'close'\n","y = df[target_variable].values\n","\n","# Feature scaling\n","scaler = MinMaxScaler()\n","y_scaled = scaler.fit_transform(y.reshape(-1, 1))\n","num_of_features = len(merged_data.columns)\n","\"\"\"\n","import pandas as pd\n","import numpy as np\n","from sklearn.preprocessing import MinMaxScaler\n","\n","# Assuming 'Datetime' is the timestamp column in your DataFrame\n","timestamp_column = 'Datetime'\n","\n","# Drop the timestamp column before transforming\n","merged_data_no_timestamp = merged_data.drop(columns=[timestamp_column])\n","\n","# Convert the remaining data to float32\n","dataset = merged_data_no_timestamp.values.astype('float32')\n","\n","# Normalize the data using MinMaxScaler\n","scaler = MinMaxScaler(feature_range=(0, 1))\n","dataset = scaler.fit_transform(dataset)\n","\n","# Check the number of features\n","num_of_features = dataset.shape[1]\n","print('Number of features:', num_of_features)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HvKmSex4iTmS","executionInfo":{"status":"ok","timestamp":1711319500642,"user_tz":240,"elapsed":9,"user":{"displayName":"Aaryan Goel","userId":"01982285527708524487"}},"outputId":"37c8ae40-ac0c-4f54-cad6-a08014561345"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of features: 31\n"]}]},{"cell_type":"code","source":["train_size_percent = 0.80\n","pred_col = merged_data.columns.get_loc('close')\n","\n","# function to split the data\n","def create_dataset(dataset, pred_col, look_back=1):\n","  dataX, dataY = [], []\n","  for i in range(len(dataset)-look_back-1):\n","    a = dataset[i:(i+look_back), :]\n","    dataX.append(a)\n","    dataY.append(dataset[i + look_back, pred_col])\n","  return np.array(dataX), np.array(dataY)\n","\n","\n","train_size = int(len(dataset) * train_size_percent)\n","test_size = len(dataset) - train_size\n","train, test = dataset[0:train_size, :], dataset[train_size:len(dataset), :]\n","\n","trainX, trainY = create_dataset(train, pred_col, look_back=look_back)\n","testX, testY = create_dataset(test, pred_col, look_back=look_back)\n","# reshape input to be  [samples, time steps, features]\n","trainX = np.reshape(trainX, (trainX.shape[0], look_back, num_of_features))\n","testX = np.reshape(testX, (testX.shape[0],look_back, num_of_features))\n","\n","print('Training dataset length ', len(train))\n","print('Testing dataset length ', len(test))\n","print('look_back ', look_back)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ojLiUwXXiYPo","executionInfo":{"status":"ok","timestamp":1711319501842,"user_tz":240,"elapsed":1206,"user":{"displayName":"Aaryan Goel","userId":"01982285527708524487"}},"outputId":"1f204df1-f538-4ba1-f8cf-3306f592bf8b"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Training dataset length  9957\n","Testing dataset length  2490\n","look_back  1440\n"]}]},{"cell_type":"markdown","source":["#model"],"metadata":{"id":"TNBzMI67lCvM"}},{"cell_type":"code","source":["!git clone https://github.com/lessw2020/Ranger-Deep-Learning-Optimizer.git\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PeIsyWGdlTfp","executionInfo":{"status":"ok","timestamp":1711319688977,"user_tz":240,"elapsed":2035,"user":{"displayName":"Aaryan Goel","userId":"01982285527708524487"}},"outputId":"4022224e-0959-4411-e34b-73e743524ce3"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["fatal: destination path 'Ranger-Deep-Learning-Optimizer' already exists and is not an empty directory.\n","\u001b[31mERROR: Directory '.' is not installable. Neither 'setup.py' nor 'pyproject.toml' found.\u001b[0m\u001b[31m\n","\u001b[0m"]}]},{"cell_type":"code","source":["import sys\n","sys.path.append(\"/content/Ranger-Deep-Learning-Optimizer\")\n","\n","from ranger import Ranger\n"],"metadata":{"id":"d9z9lTJYmSvF","executionInfo":{"status":"ok","timestamp":1711319827702,"user_tz":240,"elapsed":5808,"user":{"displayName":"Aaryan Goel","userId":"01982285527708524487"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["\n","from ranger import Ranger\n","# Drop the timestamp column from trainX and testX\n","trainX_no_timestamp = trainX[:, :, :num_of_features-1]\n","testX_no_timestamp = testX[:, :, :num_of_features-1]\n","\n","# Build the LSTM model\n","model = Sequential()\n","model.add(LSTM(lstm_layers, input_shape=(look_back, num_of_features-1)))\n","model.add(Dense(1))\n","\n","# Instantiate the Ranger optimizer with default parameters\n","ranger_optimizer = Ranger(params=model.parameters(), lr=0.001, weight_decay=0.01)\n","\n","# Compile the model with the Ranger optimizer\n","model.compile(loss='mean_squared_error', optimizer=ranger_optimizer)\n","#model.compile(loss='mean_squared_error', optimizer=Ranger())\n","\n","# Train the model\n","history = model.fit(trainX_no_timestamp, trainY, validation_split=0.30, epochs=epochs, batch_size=batch_size, shuffle=False)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":216},"id":"iVD-WilDlCNZ","executionInfo":{"status":"error","timestamp":1711320482056,"user_tz":240,"elapsed":388,"user":{"displayName":"Aaryan Goel","userId":"01982285527708524487"}},"outputId":"2d1bf0fb-570e-422c-eabe-521af438dc14"},"execution_count":21,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"'Sequential' object has no attribute 'parameters'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-21-cc28efb0ed5b>\u001b[0m in \u001b[0;36m<cell line: 12>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;31m# Instantiate the Ranger optimizer with default parameters\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0mranger_optimizer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mRanger\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.001\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mweight_decay\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.01\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;31m# Compile the model with the Ranger optimizer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'Sequential' object has no attribute 'parameters'"]}]},{"cell_type":"code","source":["#tester\n","import tensorflow as tf\n","from ranger import Ranger\n","# Drop the timestamp column from trainX and testX\n","trainX_no_timestamp = trainX[:, :, :num_of_features-1]\n","testX_no_timestamp = testX[:, :, :num_of_features-1]\n","\n","# Build the LSTM model\n","model = Sequential()\n","model.add(LSTM(lstm_layers, input_shape=(look_back, num_of_features-1)))\n","model.add(Dense(1))\n","\n","# Instantiate the Ranger optimizer with default parameters\n","adam_optimizer = tf.keras.optimizers.legacy.Adam(learning_rate=0.001)\n","\n","# Compile the model with the Adam optimizer\n","model.compile(loss='mean_squared_error', optimizer=adam_optimizer)\n","\n","# Train the model\n","history = model.fit(trainX_no_timestamp, trainY, validation_split=0.30, epochs=epochs, batch_size=batch_size, shuffle=False)\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B5sGqglcq3cN","executionInfo":{"status":"ok","timestamp":1711321196369,"user_tz":240,"elapsed":229164,"user":{"displayName":"Aaryan Goel","userId":"01982285527708524487"}},"outputId":"d37b696d-8ad3-4bf5-b39c-f74b6585412c"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","47/47 [==============================] - 52s 1s/step - loss: 0.0113 - val_loss: 0.0202\n","Epoch 2/5\n","47/47 [==============================] - 45s 962ms/step - loss: 0.0098 - val_loss: 0.0029\n","Epoch 3/5\n","47/47 [==============================] - 44s 937ms/step - loss: 0.0059 - val_loss: 0.0032\n","Epoch 4/5\n","47/47 [==============================] - 45s 961ms/step - loss: 0.0060 - val_loss: 0.0044\n","Epoch 5/5\n","47/47 [==============================] - 40s 856ms/step - loss: 0.0057 - val_loss: 0.0076\n"]}]},{"cell_type":"markdown","source":["plot training"],"metadata":{"id":"sTDag0xInqhx"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# Plot training\n","plt.plot(history.history['loss'])\n","plt.plot(history.history['val_loss'])\n","plt.title('Model loss')\n","plt.ylabel('Loss')\n","plt.xlabel('Epoch')\n","plt.legend(['training', 'validation'], loc='upper right')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"OHMLCtoHnqLT","executionInfo":{"status":"ok","timestamp":1711321210746,"user_tz":240,"elapsed":1402,"user":{"displayName":"Aaryan Goel","userId":"01982285527708524487"}},"outputId":"8e89f40f-342c-444a-c6e6-be250d3c73c2"},"execution_count":27,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["print(\"Original shapes:\")\n","print(\"trainX shape:\", trainX.shape)\n","print(\"testX shape:\", testX.shape)\n","\n","print(\"Original shapes:\")\n","print(\"trainX shape:\", trainX.shape)\n","print(\"testX shape:\", testX.shape)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4RiSe0xatZle","executionInfo":{"status":"ok","timestamp":1711321214583,"user_tz":240,"elapsed":290,"user":{"displayName":"Aaryan Goel","userId":"01982285527708524487"}},"outputId":"59e42b4f-8250-4aab-b21b-49cbe5d4d3b7"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["Original shapes:\n","trainX shape: (8516, 1440, 31)\n","testX shape: (1049, 1440, 31)\n","Original shapes:\n","trainX shape: (8516, 1440, 31)\n","testX shape: (1049, 1440, 31)\n"]}]},{"cell_type":"code","source":["# Assuming your model input shape is (look_back, num_of_features)\n","num_of_features = 31  # Update this value if needed\n","\n","trainX = np.reshape(trainX[:, :, :num_of_features - 1], (trainX.shape[0], look_back, num_of_features - 1))\n","testX = np.reshape(testX[:, :, :num_of_features - 1], (testX.shape[0], look_back, num_of_features - 1))\n","\n"],"metadata":{"id":"ROM45QVrpe2K","executionInfo":{"status":"ok","timestamp":1711321217462,"user_tz":240,"elapsed":4,"user":{"displayName":"Aaryan Goel","userId":"01982285527708524487"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.preprocessing import MinMaxScaler\n","from sklearn.metrics import mean_squared_error\n","import math\n","# Perform predictions\n","trainPredict = model.predict(trainX)\n","testPredict = model.predict(testX)\n","\n","# Get something which has as many features as the dataset\n","trainPredict_extended = np.zeros((len(trainPredict), num_of_features))\n","# Put the predictions there\n","trainPredict_extended[:, pred_col] = trainPredict[:, 0]\n","# Inverse transform it and select the pred_col column.\n","trainPredict = scaler.inverse_transform(trainPredict_extended)[:, pred_col]\n","\n","# Get something which has as many features as the dataset\n","testPredict_extended = np.zeros((len(testPredict), num_of_features))\n","# Put the predictions there\n","testPredict_extended[:, pred_col] = testPredict[:, 0]\n","# Inverse transform it and select the pred_col column.\n","testPredict = scaler.inverse_transform(testPredict_extended)[:, pred_col]\n","\n","trainY_extended = np.zeros((len(trainY), num_of_features))\n","trainY_extended[:, pred_col] = trainY\n","trainY = scaler.inverse_transform(trainY_extended)[:, pred_col]\n","\n","testY_extended = np.zeros((len(testY), num_of_features))\n","testY_extended[:, pred_col] = testY\n","testY = scaler.inverse_transform(testY_extended)[:, pred_col]\n","\n","# Calculate root mean squared error\n","trainScore_RMSE = math.sqrt(mean_squared_error(trainY, trainPredict))\n","testScore_RMSE = math.sqrt(mean_squared_error(testY, testPredict))\n","\n","# Calculate absolute mean error\n","trainScore_MAE = np.sum(np.absolute(trainY - trainPredict)) / len(trainY)\n","testScore_MAE = np.sum(np.absolute(testY - testPredict)) / len(testY)\n","\n","print(f'Train RMSE: {trainScore_RMSE}')\n","print(f'Test RMSE: {testScore_RMSE}')\n","\n","print(f'Train MAE: {trainScore_MAE}')\n","print(f'Test MAE: {testScore_MAE}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7n1KKRRCn8qX","executionInfo":{"status":"ok","timestamp":1711321274883,"user_tz":240,"elapsed":54377,"user":{"displayName":"Aaryan Goel","userId":"01982285527708524487"}},"outputId":"07f6be95-20e9-4bed-c206-a634f572fe80"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["267/267 [==============================] - 40s 144ms/step\n","33/33 [==============================] - 5s 157ms/step\n","Train RMSE: 2366.627905352807\n","Test RMSE: 1767.2153784472455\n","Train MAE: 2069.238300922821\n","Test MAE: 995.4062956502082\n"]}]},{"cell_type":"markdown","source":["experminent details"],"metadata":{"id":"o1f0uyHQvNGt"}},{"cell_type":"code","source":["print('-' * 50)\n","print('Experiment name:', expr_name)\n","\n","print('-' * 50)\n","print('look_back days:', look_back/24)\n","print('lstm_layers:', lstm_layers)\n","print('epochs:', epochs)\n","print('batch_size:', batch_size)\n","print('dataset features', list(merged_data.columns))\n","\n","\n","print('-' * 50)\n","print('Train Score: %.2f RMSE' % (trainScore_RMSE))\n","print('Test Score: %.2f RMSE' % (testScore_RMSE))\n","\n","print('-' * 50)\n","print('Train Score: %.2f MAE' % (trainScore_MAE))\n","print('Test Score: %.2f MAE' % (testScore_MAE))\n","\n","print('-' * 50)\n","print('Model summary:')\n","model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dXgrnkoDvSfV","executionInfo":{"status":"ok","timestamp":1711321756430,"user_tz":240,"elapsed":299,"user":{"displayName":"Aaryan Goel","userId":"01982285527708524487"}},"outputId":"c7913ba9-5d92-4e40-8307-6729f0cc4060"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["--------------------------------------------------\n","Experiment name: expr_1\n","--------------------------------------------------\n","look_back days: 60.0\n","lstm_layers: 32\n","epochs: 5\n","batch_size: 128\n","dataset features ['Datetime', 'SP500', 'DOW30', 'EuroStoxx50', 'NASDAQ', 'CrudeOil', 'SSE', 'Gold', 'VIX', 'Nikkei225', 'FTSE100', 'EURUSD', 'CNYUSD', 'GBPUSD', 'JPYUSD', 'CHFUSD', 'top_tier_volume_quote', 'top_tier_volume_base', 'top_tier_volume_total', 'cccagg_volume_quote', 'cccagg_volume_base', 'cccagg_volume_total', 'total_volume_quote', 'total_volume_base', 'total_volume_total', 'volume', 'high', 'low', 'open', 'close', 'volumefrom', 'volumeto']\n","--------------------------------------------------\n","Train Score: 2366.63 RMSE\n","Test Score: 1767.22 RMSE\n","--------------------------------------------------\n","Train Score: 2069.24 MAE\n","Test Score: 995.41 MAE\n","--------------------------------------------------\n","Model summary:\n","Model: \"sequential_11\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_11 (LSTM)              (None, 32)                8064      \n","                                                                 \n"," dense_11 (Dense)            (None, 1)                 33        \n","                                                                 \n","=================================================================\n","Total params: 8097 (31.63 KB)\n","Trainable params: 8097 (31.63 KB)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","source":["#Plot"],"metadata":{"id":"g1vUsNQMvavI"}},{"cell_type":"code","source":["# shift train predictions for plotting\n","trainPredictPlot = np.empty_like(dataset)\n","trainPredictPlot[:, :] = np.nan\n","trainPredictPlot[look_back:len(trainPredict)+look_back, pred_col] = trainPredict\n","\n","# shift test predictions for plotting\n","testPredictPlot = np.empty_like(dataset)\n","testPredictPlot[:, :] = np.nan\n","testPredictPlot[len(trainPredict)+(look_back*2)+1:len(dataset)-1, pred_col] = testPredict\n","\n","\"\"\"\n","# contruct pandas dataframe for plotting\n","time_df = pd.DataFrame(merged_data_no_timestamp.index)\n","time_df['Actual'] = scaler.inverse_transform(dataset)[:,pred_col]\n","df1 = pd.DataFrame(trainPredictPlot[:,pred_col],columns=['Train'])\n","df2 = pd.DataFrame(testPredictPlot[:,pred_col],columns=['Test'])\n","time_df2 = pd.concat([time_df, df1, df2], axis=1, sort=False)\n","time_df2.set_index('Datetime',inplace=True)\n","\n","# plot the output\n","fig, ax = plt.subplots(figsize=(15,7))\n","time_df2.plot(ax=ax,rot=90,alpha=0.7)\n","plt.xlabel('Timestamp')\n","plt.ylabel('Bitcoin Value')\n","plt.title('Bitcoin Price Prediction')\n","plt.savefig(expr_name + '.png',bbox_inches = \"tight\")\n","\"\"\""],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":382},"id":"LXR2aW9vvcLo","executionInfo":{"status":"error","timestamp":1711322110102,"user_tz":240,"elapsed":369,"user":{"displayName":"Aaryan Goel","userId":"01982285527708524487"}},"outputId":"dbbb7367-f09f-444a-9db5-3eb368fdfc60"},"execution_count":32,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"\"None of ['Datetime'] are in the columns\"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-32-692d0aab20f0>\u001b[0m in \u001b[0;36m<cell line: 17>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0mdf2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtestPredictPlot\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mpred_col\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Test'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0mtime_df2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtime_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdf1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdf2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msort\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 17\u001b[0;31m \u001b[0mtime_df2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Datetime'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;31m# plot the output\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    329\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfind_stack_level\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    330\u001b[0m                 )\n\u001b[0;32m--> 331\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    332\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    333\u001b[0m         \u001b[0;31m# error: \"Callable[[VarArg(Any), KwArg(Any)], Any]\" has no\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mset_index\u001b[0;34m(self, keys, drop, append, inplace, verify_integrity)\u001b[0m\n\u001b[1;32m   6010\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6011\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmissing\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6012\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"None of {missing} are in the columns\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6013\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6014\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"None of ['Datetime'] are in the columns\""]}]},{"cell_type":"code","source":["# contruct pandas dataframe for plotting\n","time_df = pd.DataFrame(merged_data_no_timestamp.index)\n","time_df['Actual'] = scaler.inverse_transform(dataset)[:,pred_col]\n","df1 = pd.DataFrame(trainPredictPlot[:,pred_col],columns=['Train'])\n","df2 = pd.DataFrame(testPredictPlot[:,pred_col],columns=['Test'])\n","time_df2 = pd.concat([time_df, df1, df2], axis=1, sort=False)\n","time_df2.set_index('Datetime',inplace=True)\n","\n","# plot the output\n","fig, ax = plt.subplots(figsize=(15,7))\n","time_df2.plot(ax=ax,rot=90,alpha=0.7)\n","plt.xlabel('Timestamp')\n","plt.ylabel('Bitcoin Value')\n","plt.title('Bitcoin Price Prediction')\n","plt.savefig(expr_name + '.png',bbox_inches = \"tight\")"],"metadata":{"id":"ysjZXFHIv_bi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"MJmMsJyxwBph"},"execution_count":null,"outputs":[]}]}